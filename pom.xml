<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://maven.apache.org/POM/4.0.0"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.7.5</version>
    <relativePath/>
  </parent>
  <groupId>com.kcm.msp.dev</groupId>
  <artifactId>app-development-parent-pom</artifactId>
  <version>${revision}</version>
  <packaging>pom</packaging>
  <description>Development parent pom.</description>

  <properties>
    <revision>0.0.1-SNAPSHOT</revision>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>
    <java.version>17</java.version>
    <!-- dependencies versions-->
    <lombok.version>1.18.24</lombok.version>
    <commons-lang3.version>3.12.0</commons-lang3.version>
    <commons-collections4.version>4.4</commons-collections4.version>
    <springdoc-openapi.version>1.6.12</springdoc-openapi.version>
    <jackson-databind-nullable.version>0.2.4</jackson-databind-nullable.version>
    <maven-enforcer-plugin.version>3.1.0</maven-enforcer-plugin.version>
    <maven.compiler.plugin.version>3.10.1</maven.compiler.plugin.version>
    <maven.checkstyle.plugin.version>3.2.0</maven.checkstyle.plugin.version>
    <checkstyle.version>10.2</checkstyle.version>
    <git-code-format.version>3.5</git-code-format.version>
    <jacoco-maven-plugin.version>0.8.8</jacoco-maven-plugin.version>
    <openapi-generator-maven-plugin.version>6.2.1</openapi-generator-maven-plugin.version>
    <findbugs-jsr305.version>3.0.2</findbugs-jsr305.version>
    <swagger-annotations.version>1.6.6</swagger-annotations.version>
    <spotbugs-maven-plugin.version>4.7.2.1</spotbugs-maven-plugin.version>
    <spotbugs.version>4.7.3</spotbugs.version>
    <arch-unit-maven-plugin.version>3.0.0</arch-unit-maven-plugin.version>
    <arch-unit-build-plugin-core.version>3.0.0</arch-unit-build-plugin-core.version>
    <archunit.version>1.0.0</archunit.version>
    <maven-model.version>3.8.6</maven-model.version>
    <app-development-archunit-rule.version>0.0.1-SNAPSHOT</app-development-archunit-rule.version>
    <owasp-dependency-check.version>7.3.0</owasp-dependency-check.version>
    <spring-cloud-aws-dependencies.version>2.4.2</spring-cloud-aws-dependencies.version>
    <spring-cloud-stream-dependencies.version>3.2.6</spring-cloud-stream-dependencies.version>
    <spring-kafka-test.version>2.9.2</spring-kafka-test.version>
    <!-- plugin related properties -->
    <archunit.skip>false</archunit.skip>
    <spotbugs.skip>false</spotbugs.skip>
    <generate-openapi-server-code.skip>false</generate-openapi-server-code.skip>
    <generate-openapi-server-code.reactive>false</generate-openapi-server-code.reactive>
    <generate-openapi-server-code.inputSpec>${project.basedir}/src/main/resources/static/openapi/openapi.yaml</generate-openapi-server-code.inputSpec>
    <generate-openapi-client-code.skip>false</generate-openapi-client-code.skip>
    <generate-openapi-client-code.library>resttemplate</generate-openapi-client-code.library>
    <generate-openapi-client-code.inputSpec>${project.basedir}/src/main/resources/static/openapi/openapi.yaml</generate-openapi-client-code.inputSpec>
    <owasp.check.skip>false</owasp.check.skip>
  </properties>
  <dependencyManagement>
    <dependencies>
      <!-- Spring Cloud AWS BOM -->
      <dependency>
        <groupId>io.awspring.cloud</groupId>
        <artifactId>spring-cloud-aws-dependencies</artifactId>
        <version>${spring-cloud-aws-dependencies.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <!-- Spring cloud dependencies BOM -->
      <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-stream-dependencies</artifactId>
        <version>${spring-cloud-stream-dependencies.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <!-- springdoc-openapi BOM -->
      <dependency>
        <groupId>org.springdoc</groupId>
        <artifactId>springdoc-openapi</artifactId>
        <version>${springdoc-openapi.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <!-- Common dependencies -->
      <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <version>${lombok.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-lang3</artifactId>
        <version>${commons-lang3.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-collections4</artifactId>
        <version>${commons-collections4.version}</version>
      </dependency>
      <!-- openapi dependencies -->
      <dependency>
        <groupId>org.openapitools</groupId>
        <artifactId>jackson-databind-nullable</artifactId>
        <version>${jackson-databind-nullable.version}</version>
      </dependency>
      <!-- following dependency are required for java client code generated by openapi-generator-maven-plugin -->
      <dependency>
        <groupId>com.google.code.findbugs</groupId>
        <artifactId>jsr305</artifactId>
        <version>${findbugs-jsr305.version}</version>
      </dependency>
      <dependency>
        <groupId>io.swagger</groupId>
        <artifactId>swagger-annotations</artifactId>
        <version>${swagger-annotations.version}</version>
      </dependency>
      <!-- dependency used by app-development-archunit-rule project-->
      <dependency>
        <groupId>com.tngtech.archunit</groupId>
        <artifactId>archunit</artifactId>
        <version>${archunit.version}</version>
      </dependency>
      <dependency>
        <groupId>com.tngtech.archunit</groupId>
        <artifactId>archunit-junit5</artifactId>
        <version>${archunit.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.maven</groupId>
        <artifactId>maven-model</artifactId>
        <version>${maven-model.version}</version>
      </dependency>
      <!-- dependency for using embedded kafka -->
      <dependency>
        <groupId>org.springframework.kafka</groupId>
        <artifactId>spring-kafka-test</artifactId>
        <version>${spring-kafka-test.version}</version>
        <scope>test</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <!-- project specific shared resource dependency . It's required for maven-dependency-plugin-->
    <dependency>
      <groupId>com.kcm.msp.dev</groupId>
      <artifactId>app-development-shared-resource</artifactId>
      <version>0.0.1-SNAPSHOT</version>
      <classifier>resources</classifier>
      <scope>provided</scope>
      <type>zip</type>
      <optional>true</optional>
    </dependency>
  </dependencies>

  <build>
    <pluginManagement>
      <plugins>
        <!-- Java Compiler -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${maven.compiler.plugin.version}</version>
          <configuration>
            <release>${java.version}</release>
            <source>${java.version}</source>
            <target>${java.version}</target>
          </configuration>
        </plugin>
        <!-- Java version enforcer -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-enforcer-plugin</artifactId>
          <version>${maven-enforcer-plugin.version}</version>
          <executions>
            <execution>
              <id>enforce-java</id>
              <goals>
                <goal>enforce</goal>
              </goals>
              <configuration>
                <rules>
                  <requireJavaVersion>
                    <version>${java.version}</version>
                    <message>Invalid Java version. It should be at least ${java.version}</message>
                  </requireJavaVersion>
                </rules>
              </configuration>
            </execution>
            <execution>
              <id>enforce-maven</id>
              <goals>
                <goal>enforce</goal>
              </goals>
              <configuration>
                <rules>
                  <requireMavenVersion>
                    <version>[3.5.4,)</version><!-- greater than or equals 3.5.4  -->
                    <message>Invalid Maven version. It should be at least 3.5.4</message>
                  </requireMavenVersion>
                </rules>
              </configuration>
            </execution>
            <execution>
              <id>enforce-project-specific</id>
              <goals>
                <goal>enforce</goal>
              </goals>
              <configuration>
                <rules>
                  <banDuplicatePomDependencyVersions/>
                </rules>
              </configuration>
            </execution>
            <execution>
              <id>enforce-banned-dependencies</id>
              <goals>
                <goal>enforce</goal>
              </goals>
              <configuration>
                <rules>
                  <bannedDependencies>
                    <!-- checks if log4j-core dependencies is below the version 2.17.1 -->
                    <excludes>
                      <exclude>org.apache.logging.log4j:log4j-core:(,2.17.1)</exclude>
                    </excludes>
                    <searchTransitive>true</searchTransitive>
                  </bannedDependencies>
                </rules>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <!--  Google checkstyle -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-checkstyle-plugin</artifactId>
          <version>${maven.checkstyle.plugin.version}</version>
          <dependencies>
            <!-- added to use new checkstyle version -->
            <dependency>
              <groupId>com.puppycrawl.tools</groupId>
              <artifactId>checkstyle</artifactId>
              <version>${checkstyle.version}</version>
            </dependency>
          </dependencies>
          <executions>
            <execution>
              <id>google-checkstyle</id>
              <phase>validate</phase>
              <goals>
                <goal>check</goal>
              </goals>
              <configuration>
                <configLocation>google_checks.xml</configLocation>
                <suppressionsLocation>supressions.xml</suppressionsLocation>
                <encoding>UTF-8</encoding>
                <failsOnError>true</failsOnError>
                <consoleOutput>true</consoleOutput>
                <violationSeverity>error</violationSeverity>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <!-- Git code formatting at precommit and mvn verify. For Manual code format use 'mvn git-code-format:format-code'-->
        <plugin>
          <groupId>com.cosium.code</groupId>
          <artifactId>git-code-format-maven-plugin</artifactId>
          <version>${git-code-format.version}</version>
          <executions>
            <!-- On commit, format the modified java files -->
            <execution>
              <id>install-formatter-hook</id>
              <goals>
                <goal>install-hooks</goal>
              </goals>
            </execution>
            <!-- On Maven verify phase, fail if any file
            (including unmodified) is badly formatted -->
            <execution>
              <id>validate-code-format</id>
              <goals>
                <goal>validate-code-format</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <googleJavaFormatOptions>
              <aosp>false</aosp>
              <fixImportsOnly>false</fixImportsOnly>
              <skipSortingImports>false</skipSortingImports>
              <skipRemovingUnusedImports>false</skipRemovingUnusedImports>
            </googleJavaFormatOptions>
          </configuration>
        </plugin>
        <!-- jacoco plugin to generate test report-->
        <plugin>
          <groupId>org.jacoco</groupId>
          <artifactId>jacoco-maven-plugin</artifactId>
          <version>${jacoco-maven-plugin.version}</version>
          <executions>
            <execution>
              <goals>
                <goal>prepare-agent</goal>
              </goals>
            </execution>
            <execution>
              <id>report</id>
              <phase>test</phase>
              <goals>
                <goal>report</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <!-- openapi code generator -->
        <plugin>
          <groupId>org.openapitools</groupId>
          <artifactId>openapi-generator-maven-plugin</artifactId>
          <version>${openapi-generator-maven-plugin.version}</version>
          <executions>
            <execution>
              <id>generate-openapi-server-code</id>
              <goals>
                <goal>generate</goal>
              </goals>
              <configuration>
                <skip>${generate-openapi-server-code.skip}</skip>
                <!--<inputSpec>https://petstore3.swagger.io/api/v3/openapi.yaml</inputSpec>-->
                <inputSpec>${generate-openapi-server-code.inputSpec}</inputSpec>
                <generatorName>spring</generatorName>
                <library>spring-boot</library>
                <apiPackage>${project.groupId}.${generate-openapi-server-code.package}.api</apiPackage>
                <modelPackage>${project.groupId}.${generate-openapi-server-code.package}.models</modelPackage>
                <supportingFilesToGenerate>ApiUtil.java</supportingFilesToGenerate>
                <output>${project.build.directory}/generated-sources</output>
                <configOptions>
                  <reactive>${generate-openapi-server-code.reactive}</reactive>
                  <sourceFolder>src/main/java/</sourceFolder>
                  <delegatePattern>true</delegatePattern>
                  <interfaceOnly>true</interfaceOnly>
                  <useTags>true</useTags>
                  <!--<additionalModelTypeAnnotations>@lombok.Builder</additionalModelTypeAnnotations>-->
                </configOptions>
              </configuration>
            </execution>
            <execution>
              <id>generate-openapi-client-code</id>
              <goals>
                <goal>generate</goal>
              </goals>
              <configuration>
                <skip>${generate-openapi-client-code.skip}</skip>
                <inputSpec>${generate-openapi-client-code.inputSpec}</inputSpec>
                <generatorName>java</generatorName>
                <library>${generate-openapi-client-code.library}</library>
                <apiPackage>${project.groupId}.${generate-openapi-client-code.package}.api</apiPackage>
                <modelPackage>${project.groupId}.${generate-openapi-client-code.package}.models</modelPackage>
                <output>${project.build.directory}/generated-sources</output>
                <!-- set generateApis to 'false' if we want to generate model classes only-->
                <generateApis>true</generateApis>
                <generateApiDocumentation>false</generateApiDocumentation>
                <generateApiTests>false</generateApiTests>
                <generateModels>true</generateModels>
                <generateModelDocumentation>false</generateModelDocumentation>
                <generateModelTests>false</generateModelTests>
                <!--<generateSupportingFiles>true</generateSupportingFiles>-->
                <!--<supportingFilesToGenerate>ApiUtil.java</supportingFilesToGenerate>-->
                <configOptions>
                  <sourceFolder>src/main/java</sourceFolder>
                  <useTags>true</useTags>
                  <interfaceOnly>true</interfaceOnly>
                  <dateLibrary>java8</dateLibrary>
                </configOptions>
                <!-- set this to override variables defined in spec. use ',' for passing multiple values -->
                <serverVariableOverrides>${generate-openapi-client-code.overrideServerVariables}</serverVariableOverrides>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <!-- spotbugs plugin -->
        <plugin>
          <groupId>com.github.spotbugs</groupId>
          <artifactId>spotbugs-maven-plugin</artifactId>
          <version>${spotbugs-maven-plugin.version}</version>
          <dependencies>
            <!-- overwrite dependency on spotbugs if you want to specify the version of spotbugs -->
            <dependency>
              <groupId>com.github.spotbugs</groupId>
              <artifactId>spotbugs</artifactId>
              <version>${spotbugs.version}</version>
            </dependency>
          </dependencies>
          <configuration>
            <skip>${spotbugs.skip}</skip>
            <failOnError>true</failOnError>
            <!-- threshold values Low,Medium,High -->
            <threshold>High</threshold>
          </configuration>
          <executions>
            <execution>
              <id>spotbugs-check</id>
              <phase>verify</phase>
              <goals>
                <goal>check</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <!-- archunit plugin . Use 'mvn arch-unit:arch-test' to individually run archunit tests-->
        <plugin>
          <groupId>com.societegenerale.commons</groupId>
          <artifactId>arch-unit-maven-plugin</artifactId>
          <version>${arch-unit-maven-plugin.version}</version>
          <dependencies>
            <dependency>
              <groupId>com.societegenerale.commons</groupId>
              <artifactId>arch-unit-build-plugin-core</artifactId>
              <version>${arch-unit-build-plugin-core.version}</version>
            </dependency>
            <dependency>
              <groupId>com.kcm.msp.dev</groupId>
              <artifactId>app-development-archunit-rule</artifactId>
              <version>${app-development-archunit-rule.version}</version>
            </dependency>
          </dependencies>
          <configuration>
            <skip>${archunit.skip}</skip>
            <excludedPaths>
              <excludedPath>generated-sources</excludedPath>
            </excludedPaths>
            <rules>
              <preConfiguredRules>
                <rule>com.societegenerale.commons.plugin.rules.NoStandardStreamRuleTest</rule>
                <!--<rule>com.societegenerale.commons.plugin.rules.NoJunitAssertRuleTest</rule>-->
                <rule>com.societegenerale.commons.plugin.rules.NoJodaTimeRuleTest</rule>
                <rule>com.societegenerale.commons.plugin.rules.NoJavaUtilDateRuleTest</rule>
                <rule>com.societegenerale.commons.plugin.rules.NoPowerMockRuleTest</rule>
                <rule>com.societegenerale.commons.plugin.rules.NoPrefixForInterfacesRuleTest</rule>
                <rule>com.societegenerale.commons.plugin.rules.NoPublicFieldRuleTest</rule>
                <!-- you may want to use one of the below rules, but not both at same time -->
                <rule>com.societegenerale.commons.plugin.rules.NoTestIgnoreRuleTest</rule>
                <!--<rule>com.societegenerale.commons.plugin.rules.NoTestIgnoreWithoutCommentRuleTest</rule>-->
                <rule>com.societegenerale.commons.plugin.rules.NoInjectedFieldTest</rule>
                <rule>com.societegenerale.commons.plugin.rules.NoAutowiredFieldTest</rule>
              </preConfiguredRules>
              <!-- Adding project specific custom rules -->
              <configurableRules>
                <configurableRule>
                  <rule>com.kcm.msp.dev.app.development.archunit.rule.ProjectArchitectureRule</rule>
                  <!--<checks>
                    <check>controllerRule</check>
                    <check>serviceRule</check>
                    <check>LAYER_DEPENDENCIES_ARE_RESPECTED</check>
                  </checks>-->
                </configurableRule>
              </configurableRules>
            </rules>
          </configuration>
          <executions>
            <execution>
              <id>archunit-test</id>
              <phase>test</phase>
              <goals>
                <goal>arch-test</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <!-- maven-dependency-plugin to unpack shared resources -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <executions>
            <execution>
              <id>unpack-shared-resources</id>
              <phase>package</phase>
              <goals>
                <goal>unpack-dependencies</goal>
              </goals>
              <configuration>
                <outputDirectory>${project.basedir}</outputDirectory>
                <includeGroupIds>com.kcm.msp.dev</includeGroupIds>
                <includeArtifactIds>app-development-shared-resource</includeArtifactIds>
                <excludeTransitive>true</excludeTransitive>
                <classifier>resources</classifier>
                <scope>provided</scope>
                <type>zip</type>
                <optional>true</optional>
                <!--use as much as needed to be specific...also scope,type,classifier etc-->
              </configuration>
            </execution>
          </executions>
        </plugin>
        <!-- spring-boot-maven-plugin -->
        <plugin>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-maven-plugin</artifactId>
          <configuration>
            <excludes>
              <!-- exclude app-development-shared-resource from been included in the final project jar -->
              <exclude>
                <groupId>com.kcm.msp.dev</groupId>
                <artifactId>app-development-shared-resource</artifactId>
              </exclude>
            </excludes>
          </configuration>
        </plugin>
        <!--  owasp plugin-->
        <plugin>
          <groupId>org.owasp</groupId>
          <artifactId>dependency-check-maven</artifactId>
          <version>${owasp-dependency-check.version}</version>
          <configuration>
            <skip>${owasp.check.skip}</skip>
            <failBuildOnAnyVulnerability>true</failBuildOnAnyVulnerability>
            <failBuildOnCVSS>5</failBuildOnCVSS>
            <retireJsAnalyzerEnabled>false</retireJsAnalyzerEnabled>
            <nuspecAnalyzerEnabled>false</nuspecAnalyzerEnabled>
            <assemblyAnalyzerEnabled>false</assemblyAnalyzerEnabled>
          </configuration>
          <executions>
            <execution>
              <goals>
                <goal>check</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <!-- for adding shared app-development-shared-resource automatically to child projects -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>quality-assurance-check</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.owasp</groupId>
            <artifactId>dependency-check-maven</artifactId>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
